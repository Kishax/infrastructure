AWSTemplateFormatVersion: "2010-09-09"
Description: "Kishax Infrastructure"

Parameters:
  AccountId:
    Type: String
    Description: AWS Account ID
    Default: "$(AWS_ACCOUNT_ID)"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for ECS tasks
    Default: "$(AWS_VPC_ID)"
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for ECS tasks (Private subnets for better security)
    Default: "$(AWS_PRIVATE_SUBNET_IDS)"
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public Subnet IDs for ALB
    Default: "$(AWS_PUBLIC_SUBNET_IDS)"

Resources:
  # ===========================================
  # SQS Resources
  # ===========================================
  DiscordQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kishax-discord-queue-v2
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DiscordDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: DiscordBot

  DiscordDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kishax-discord-dlq-v2
      MessageRetentionPeriod: 1209600 # 14 days
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: DiscordBot

  # New naming: TO_MC Queue (WEB → MC)
  ToMcQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kishax-to-mc-queue-v2
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ToMcDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: ToMcCommunication

  ToMcDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kishax-to-mc-dlq-v2
      MessageRetentionPeriod: 1209600 # 14 days
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: ToMcCommunication

  ToWebQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kishax-to-web-queue-v2
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ToWebDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: ToWebCommunication

  ToWebDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kishax-to-web-dlq-v2
      MessageRetentionPeriod: 1209600 # 14 days
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: ToWebCommunication

  # ===========================================
  # SSM Parameters (Note: updated to new naming convention)
  # Only update if needed, avoid creating duplicate
  # ===========================================

  # MC-Web SQS通信専用ユーザー
  McWebSqsUser:
    Type: AWS::IAM::User
    Properties:
      UserName: kishax-mc-web-sqs-user
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: McWebCommunication

  # MC-Web SQS通信専用ポリシー
  McWebSqsUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: KishaxMcWebSqsUserPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sqs:SendMessage"
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
            Resource:
              - !GetAtt ToMcQueue.Arn
              - !GetAtt ToWebQueue.Arn
      Users:
        - !Ref McWebSqsUser

  McWebSqsUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref McWebSqsUser

  McWebSqsUserAccessKeyIdSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/mc-web-sqs/access-key-id
      Type: String
      Value: !Ref McWebSqsUserAccessKey
      Description: "MC-Web SQS User Access Key ID"
      Tags:
        Project: Kishax
        Component: McWebCommunication

  McWebSqsUserSecretKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/mc-web-sqs/secret-access-key
      Type: String
      DataType: text
      Value: !GetAtt McWebSqsUserAccessKey.SecretAccessKey
      Description: "MC-Web SQS User Secret Access Key"
      Tags:
        Project: Kishax
        Component: McWebCommunication

  # ===========================================
  # ECS Resources (for Discord Bot service)
  # ===========================================
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: kishax-infrastructure-cluster
      Tags:
        - Key: Project
          Value: Kishax

  # ===========================================
  # Security Groups (defined early for references)
  # ===========================================
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kishax ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from internet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Project
          Value: Kishax

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kishax ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref AlbSecurityGroup
          Description: Allow traffic from ALB to ECS tasks
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref AlbSecurityGroup
          Description: Allow traffic from ALB to Kishax API tasks
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          SourceSecurityGroupId: !Ref AlbSecurityGroup
          Description: Allow health checks from ALB to ECS management interface
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: kishax-ecs-sg
        - Key: Project
          Value: Kishax

  # ===========================================
  # ElastiCache Resources (Redis)
  # ===========================================
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Redis ElastiCache cluster"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref EcsSecurityGroup
          Description: "Allow Redis traffic from ECS tasks"
      Tags:
        - Key: Name
          Value: kishax-redis-sg
        - Key: Project
          Value: Kishax

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "Subnet group for Redis ElastiCache cluster"
      SubnetIds: !Ref SubnetIds # Use private subnets
      Tags:
        - Key: Project
          Value: Kishax

  RedisReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: kishax-web-redis
      ReplicationGroupDescription: "Redis cluster for kishax-web"
      Engine: redis
      CacheNodeType: cache.t4g.small
      NumNodeGroups: 1
      ReplicasPerNodeGroup: 0 # Single node for now. Increase for HA.
      AutomaticFailoverEnabled: false
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
      Port: 6379
      Tags:
        - Key: Project
          Value: Kishax

  # Task Execution Role (for ECS tasks)
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: kishax-infrastructure-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/sqs/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/gather/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/slack/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/oauth/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/cognito/*"

  # Task Role (for Discord Bot application)
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: kishax-infrastructure-ecs-task-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt DiscordQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt ToMcQueue.Arn
                  - !GetAtt ToWebQueue.Arn
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/kishax-discord-bot:*"
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/sqs/*"

  # CloudWatch Log Groups
  DiscordBotLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/kishax-discord-bot-v2
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: Kishax

  WebLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/kishax-web-v2
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: Kishax

  GatherBotLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/kishax-gather-bot-v2
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: Kishax

  AuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/kishax-auth-v2
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: Kishax

  # ===========================================
  # Web ECS Resources
  # ===========================================
  RedisUrlSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/web/redis-url
      Description: "Redis connection URL for the web application"
      Type: String
      Value: !Sub "redis://${RedisReplicationGroup.PrimaryEndPoint.Address}:${RedisReplicationGroup.PrimaryEndPoint.Port}"
      Tags:
        Project: Kishax
        Component: Web

  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kishax-web-v2
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: kishax-web
          Image: !Sub "${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/kishax-web:latest"
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: AUTH_TRUST_HOST
              Value: "true"
            - Name: NODE_ENV
              Value: "production"
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: PORT
              Value: "3000"
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/database-url"
            - Name: AUTH_SECRET
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/auth-secret"
            - Name: NEXTAUTH_SECRET
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/nextauth-secret"
            - Name: NEXTAUTH_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/nextauth-url"
            - Name: GOOGLE_CLIENT_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/google-client-id"
            - Name: GOOGLE_CLIENT_SECRET
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/google-client-secret"
            - Name: DISCORD_CLIENT_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/discord-client-id"
            - Name: DISCORD_CLIENT_SECRET
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/discord-client-secret"
            - Name: TWITTER_CLIENT_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/twitter-client-id"
            - Name: TWITTER_CLIENT_SECRET
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/twitter-client-secret"
            - Name: EMAIL_HOST
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/email-host"
            - Name: EMAIL_PORT
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/email-port"
            - Name: EMAIL_USER
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/email-user"
            - Name: EMAIL_PASS
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/email-pass"
            - Name: EMAIL_FROM
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/email-from"
            - Name: REDIS_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/redis-url"
            - Name: INTERNAL_API_KEY
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/internal-api-key"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Project
          Value: Kishax

  WebService:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpsListener
      - WebTargetGroup
    Properties:
      ServiceName: kishax-web-service-v2
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref WebTaskDefinition
      DesiredCount: 0 # 一時的に停止
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PublicSubnetIds
          SecurityGroups:
            - !Ref EcsSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - TargetGroupArn: !Ref WebTargetGroup
          ContainerName: kishax-web
          ContainerPort: 3000
      Tags:
        - Key: Project
          Value: Kishax

  # ===========================================
  # ALB Resources
  # ===========================================
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: kishax-alb-v2
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets: !Ref PublicSubnetIds
      Tags:
        - Key: Project
          Value: Kishax

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: kishax-web-tg-v2
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200"
      Tags:
        - Key: Project
          Value: Kishax

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: HTTP_301

  AuthTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: kishax-auth-tg-v2
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health/ready
      HealthCheckProtocol: HTTP
      HealthCheckPort: 9000
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: Auth

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: $(AWS_SSL_CERTIFICATE_ARN)
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup

  AuthListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpsListener
      Priority: 100
      Conditions:
        - Field: host-header
          Values:
            - $(AUTH_SERVICE_DOMAIN)
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AuthTargetGroup

  # ===========================================
  # Kishax API ECS Resources
  # ===========================================
  KishaxApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: kishax-api-tg-v2
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /api/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: KishaxApi

  KishaxApiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpsListener
      Priority: 50
      Conditions:
        - Field: host-header
          Values:
            - api.kishax.net
        - Field: path-pattern
          Values:
            - /mc/auth/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref KishaxApiTargetGroup

  KishaxApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kishax-api-v2
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: kishax-api
          Image: !Sub "${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/kishax-api:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            # Multi-Module Configuration
            - Name: SQS_BRIDGE_VERSION
              Value: "1.0.6"
            - Name: MC_AUTH_VERSION
              Value: "1.0.6"
            - Name: ENVIRONMENT
              Value: "production"

            # Authentication API Configuration
            - Name: AUTH_API_ENABLED
              Value: "true"
            - Name: AUTH_API_PORT
              Value: "8080"

            # AWS SQS Configuration
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: REDIS_CONNECTION_TIMEOUT
              Value: "5000"
            - Name: REDIS_COMMAND_TIMEOUT
              Value: "3000"

            # SQS Worker Configuration
            - Name: QUEUE_MODE
              Value: "WEB"
            - Name: SQS_WORKER_ENABLED
              Value: "true"
            - Name: SQS_WORKER_POLLING_INTERVAL_SECONDS
              Value: "5"
            - Name: SQS_WORKER_MAX_MESSAGES
              Value: "10"
            - Name: SQS_WORKER_WAIT_TIME_SECONDS
              Value: "20"
            - Name: SQS_WORKER_VISIBILITY_TIMEOUT_SECONDS
              Value: "30"

            # Application Configuration
            - Name: APP_SHUTDOWN_GRACE_PERIOD_SECONDS
              Value: "30"
          Secrets:
            # Authentication API Configuration
            - Name: AUTH_API_KEY
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/api/auth-api-key"

            # Database Configuration
            - Name: DATABASE_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/database-url"

            # AWS SQS Configuration (正しいパラメータパスに修正)
            - Name: MC_WEB_SQS_ACCESS_KEY_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/mc-web-sqs/access-key-id"
            - Name: MC_WEB_SQS_SECRET_ACCESS_KEY
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/mc-web-sqs/secret-access-key"
            - Name: TO_WEB_QUEUE_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/sqs/to-web-queue-url"
            - Name: TO_MC_QUEUE_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/sqs/to-mc-queue-url"

            # Redis Configuration
            - Name: REDIS_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/redis-url"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KishaxApiLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: KishaxApi

  KishaxApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/kishax-api-v2
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: KishaxApi

  KishaxApiService:
    Type: AWS::ECS::Service
    DependsOn:
      - KishaxApiTargetGroup
      - KishaxApiListenerRule
    Properties:
      ServiceName: kishax-api-service-v2
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref KishaxApiTaskDefinition
      DesiredCount: 0 # 一時的に停止
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets: !Ref PublicSubnetIds
          AssignPublicIp: ENABLED
      LoadBalancers:
        - TargetGroupArn: !Ref KishaxApiTargetGroup
          ContainerName: kishax-api
          ContainerPort: 8080
      HealthCheckGracePeriodSeconds: 120
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: KishaxApi

  # ===========================================
  # Auth ECS Resources (Keycloak)
  # ===========================================
  AuthTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kishax-auth-v2
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: kishax-auth
          Image: !Sub "${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/kishax-auth:latest"
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
            - ContainerPort: 9000
              Protocol: tcp
          Environment:
            - Name: KC_FEATURES
              Value: "token-exchange,admin-fine-grained-authz"
            - Name: KC_HTTP_PORT
              Value: "3000"
            - Name: KC_HTTP_ENABLED
              Value: "true"
            - Name: KC_HOSTNAME
              Value: "auth.kishax.net"
            - Name: KC_HOSTNAME_ADMIN_URL
              Value: "https://auth.kishax.net"
            - Name: KC_PROXY
              Value: "edge"
            - Name: KC_HOSTNAME_STRICT
              Value: "false"
            - Name: KC_HOSTNAME_STRICT_HTTPS
              Value: "false"
            - Name: KC_DB
              Value: "postgres"
            - Name: KC_LOG_LEVEL
              Value: "INFO"
            - Name: KC_HEALTH_ENABLED
              Value: "true"
            - Name: KC_METRICS_ENABLED
              Value: "true"
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AccountId
            - Name: KC_LOG_LEVEL
              Value: "INFO"
          Secrets:
            - Name: KEYCLOAK_ADMIN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/keycloak-admin"
            - Name: KEYCLOAK_ADMIN_PASSWORD
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/keycloak-admin-password"
            - Name: KC_DB_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/keycloak-database-url"
            - Name: KC_DB_USERNAME
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/keycloak-database-username"
            - Name: KC_DB_PASSWORD
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/keycloak-database-password"
            - Name: GITHUB_CLIENT_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/oauth/github-client-id"
            - Name: GITHUB_CLIENT_SECRET
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/oauth/github-client-secret"
            - Name: IAM_IDENTITY_CENTER_ACS_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/iam-identity-center-acs-url"
            - Name: IAM_IDENTITY_CENTER_ISSUER_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/iam-identity-center-issuer-url"
            - Name: SMTP_HOST
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/smtp-host"
            - Name: SMTP_PORT
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/smtp-port"
            - Name: SMTP_USER
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/smtp-user"
            - Name: SMTP_PASSWORD
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/smtp-password"
            - Name: SMTP_SSL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/smtp-ssl"
            - Name: SMTP_STARTTLS
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/smtp-starttls"
            - Name: SMTP_FROM
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/smtp-from"
            - Name: SMTP_FROM_DISPLAY_NAME
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/smtp-from-display-name"
            - Name: AWS_START_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/aws-start-url"
            - Name: AWS_WORKMAIL_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/auth/aws-workmail-url"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AuthLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: Auth

  AuthService:
    Type: AWS::ECS::Service
    DependsOn:
      - AuthTargetGroup
      - AuthListenerRule
    Properties:
      ServiceName: kishax-auth-service-v2
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref AuthTaskDefinition
      DesiredCount: 0 # 一時的に停止
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets: !Ref PublicSubnetIds
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: kishax-auth
          ContainerPort: 3000
          TargetGroupArn: !Ref AuthTargetGroup
      HealthCheckGracePeriodSeconds: 300
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: Auth

  # ===========================================
  # Gather Bot ECS Resources
  # ===========================================
  GatherBotTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kishax-gather-bot-v2
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: gather-bot
          Image: !Sub "${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/kishax-gather-bot:latest"
          Environment:
            - Name: PORT
              Value: "3000"
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: NODE_ENV
              Value: "production"
          Secrets:
            - Name: GATHER_API_KEY
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/gather/api-key"
            - Name: GATHER_SPACE_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/gather/space-id"
            - Name: SLACK_WEBHOOK_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/slack/webhook-url"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref GatherBotLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Project
          Value: Kishax

  GatherBotService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: kishax-gather-bot-service-v2
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref GatherBotTaskDefinition
      DesiredCount: 0 # 一時的に停止
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PublicSubnetIds
          SecurityGroups:
            - !Ref EcsSecurityGroup
          AssignPublicIp: ENABLED
      Tags:
        - Key: Project
          Value: Kishax

  # ===========================================
  # Discord Bot ECS Resources
  # ===========================================
  DiscordBotTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kishax-discord-bot-v2
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: discord-bot
          Image: !Sub "${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/kishax-discord-bot:latest"
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: NODE_ENV
              Value: "production"
            - Name: SQS_MAX_MESSAGES
              Value: "10"
            - Name: SQS_WAIT_TIME_SECONDS
              Value: "20"
          Secrets:
            - Name: DISCORD_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/token"
            - Name: DISCORD_CHANNEL_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/channel-id"
            - Name: DISCORD_CHAT_CHANNEL_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/chat-channel-id"
            - Name: DISCORD_ADMIN_CHANNEL_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/admin-channel-id"
            - Name: DISCORD_RULE_CHANNEL_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/rule-channel-id"
            - Name: DISCORD_RULE_MESSAGE_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/rule-message-id"
            - Name: DISCORD_GUILD_ID
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/guild-id"
            - Name: DISCORD_PRESENCE_ACTIVITY
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/presence-activity"
            - Name: DISCORD_EMOJI_DEFAULT_NAME
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/discord/emoji-default-name"
            - Name: TO_DISCORD_QUEUE_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/sqs/to-discord-queue-url"
            - Name: REDIS_URL
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AccountId}:parameter/kishax/web/redis-url"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DiscordBotLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Project
          Value: Kishax

  DiscordBotService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: kishax-discord-bot-service-v2
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref DiscordBotTaskDefinition
      DesiredCount: 0 # 一時的に停止
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PublicSubnetIds
          SecurityGroups:
            - !Ref EcsSecurityGroup
          AssignPublicIp: ENABLED
      Tags:
        - Key: Project
          Value: Kishax

Outputs:
  # SQS Outputs
  SqsQueueUrl:
    Description: SQS Queue URL
    Value: !Ref DiscordQueue
    Export:
      Name: !Sub "${AWS::StackName}-SqsQueueUrl"

  SqsQueueArn:
    Description: SQS Queue ARN
    Value: !GetAtt DiscordQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SqsQueueArn"

  # New naming: TO_* Queue Communication SQS Outputs
  ToMcQueueUrl:
    Description: TO MC SQS Queue URL
    Value: !Ref ToMcQueue
    Export:
      Name: !Sub "${AWS::StackName}-ToMcQueueUrl"

  ToMcQueueArn:
    Description: TO MC SQS Queue ARN
    Value: !GetAtt ToMcQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ToMcQueueArn"

  ToWebQueueUrl:
    Description: TO Web SQS Queue URL
    Value: !Ref ToWebQueue
    Export:
      Name: !Sub "${AWS::StackName}-ToWebQueueUrl"

  ToWebQueueArn:
    Description: TO Web SQS Queue ARN
    Value: !GetAtt ToWebQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ToWebQueueArn"

  # ECS Outputs
  EcsClusterArn:
    Description: ECS Cluster ARN
    Value: !GetAtt EcsCluster.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcsClusterArn"

  EcsTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt EcsTaskExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcsTaskExecutionRoleArn"

  EcsTaskRoleArn:
    Description: ECS Task Role ARN
    Value: !GetAtt EcsTaskRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcsTaskRoleArn"

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref EcsSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"

  # Web ECS Outputs
  WebServiceArn:
    Description: Web ECS Service ARN
    Value: !Ref WebService
    Export:
      Name: !Sub "${AWS::StackName}-WebServiceArn"

  WebTaskDefinitionArn:
    Description: Web Task Definition ARN
    Value: !Ref WebTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-WebTaskDefinitionArn"

  # ALB Outputs
  LoadBalancerArn:
    Description: Application Load Balancer ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerArn"

  LoadBalancerDNSName:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNSName"

  WebTargetGroupArn:
    Description: Web Target Group ARN
    Value: !Ref WebTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-WebTargetGroupArn"

  # Gather Bot ECS Outputs
  GatherBotServiceArn:
    Description: Gather Bot ECS Service ARN
    Value: !Ref GatherBotService
    Export:
      Name: !Sub "${AWS::StackName}-GatherBotServiceArn"

  GatherBotTaskDefinitionArn:
    Description: Gather Bot Task Definition ARN
    Value: !Ref GatherBotTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-GatherBotTaskDefinitionArn"

  # Kishax API ECS Outputs
  KishaxApiServiceArn:
    Description: Kishax API ECS Service ARN
    Value: !Ref KishaxApiService
    Export:
      Name: !Sub "${AWS::StackName}-KishaxApiServiceArn"

  KishaxApiTaskDefinitionArn:
    Description: Kishax API Task Definition ARN
    Value: !Ref KishaxApiTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-KishaxApiTaskDefinitionArn"

  KishaxApiTargetGroupArn:
    Description: Kishax API Target Group ARN
    Value: !Ref KishaxApiTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-KishaxApiTargetGroupArn"

  # Discord Bot ECS Outputs
  DiscordBotServiceArn:
    Description: Discord Bot ECS Service ARN
    Value: !Ref DiscordBotService
    Export:
      Name: !Sub "${AWS::StackName}-DiscordBotServiceArn"

  DiscordBotTaskDefinitionArn:
    Description: Discord Bot Task Definition ARN
    Value: !Ref DiscordBotTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-DiscordBotTaskDefinitionArn"

  # MC-Web SQS User Outputs
  McWebSqsUserName:
    Description: MC-Web SQS User Name
    Value: !Ref McWebSqsUser
    Export:
      Name: !Sub "${AWS::StackName}-McWebSqsUserName"

  McWebSqsUserAccessKeyId:
    Description: MC-Web SQS User Access Key ID
    Value: !Ref McWebSqsUserAccessKey
    Export:
      Name: !Sub "${AWS::StackName}-McWebSqsUserAccessKeyId"

  McWebSqsUserAccessKeyIdSsmPath:
    Description: SSM Parameter path for MC-Web SQS User Access Key ID
    Value: !Sub "/kishax/mc-web-sqs/access-key-id"
    Export:
      Name: !Sub "${AWS::StackName}-McWebSqsUserAccessKeyIdSsmPath"

  McWebSqsUserSecretKeySsmPath:
    Description: SSM Parameter path for MC-Web SQS User Secret Access Key
    Value: !Sub "/kishax/mc-web-sqs/secret-access-key"
    Export:
      Name: !Sub "${AWS::StackName}-McWebSqsUserSecretKeySsmPath"
