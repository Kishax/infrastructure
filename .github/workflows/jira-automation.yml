# .github/workflows/jira-automation.yml
name: Jira Automation

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

# --- 設定項目 ---
# 新規課題を作成するJiraプロジェクトの情報を設定してください
env:
  JIRA_PROJECT_KEY: SCRUM   # 例: 'PROJ'
  JIRA_ISSUE_TYPE: Task  # 例: 'Task', 'Story'

jobs:
  jira-automation-on-pr:
    name: Jira Automation on Pull Request
    runs-on: ubuntu-latest
    permissions:
      # PRへのコメント投稿とコンテンツの読み取り権限が必要
      contents: read
      pull-requests: write
    steps:
      # -----------------------------------------------------------------
      # 【修正】最初にJiraへのログイン処理を追加
      # -----------------------------------------------------------------
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      # -----------------------------------------------------------------
      # 1. ブランチ名からJira課題キーを抽出 (エラーでも続行)
      # -----------------------------------------------------------------
      - name: Find Jira issue key from branch name
        id: find_issue
        uses: atlassian/gajira-find-issue-key@v3
        continue-on-error: true
        with:
          string: ${{ github.head_ref }}

      # =================================================================
      # 2. 課題キーが見つからなかった場合に新規作成
      # =================================================================
      - name: Create Jira issue if not found
        if: ${{ !steps.find_issue.outputs.issue }}
        id: create_issue
        uses: atlassian/gajira-create@v3
        with:
          project: ${{ env.JIRA_PROJECT_KEY }}
          issuetype: ${{ env.JIRA_ISSUE_TYPE }}
          summary: ${{ github.event.pull_request.title }}
          description: |
            PRを作成したため、Jira課題を自動作成しました。

            PR Title: ${{ github.event.pull_request.title }}
            PR Body:
            ${{ github.event.pull_request.body }}
            
            PR URL: ${{ github.event.pull_request.html_url }}

      - name: Comment created issue key on PR
        if: ${{ steps.create_issue.outputs.issue }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueKey = "${{ steps.create_issue.outputs.issue }}";
            const jiraBaseUrl = "${{ secrets.JIRA_BASE_URL }}";
            const issueUrl = `${jiraBaseUrl}/browse/${issueKey}`;
            const body = `✅ Jira issue [${issueKey}](${issueUrl}) has been automatically created for this pull request.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      # =================================================================
      # 3. 【ここから共通処理】担当者割り当てとステータス移行
      # =================================================================
      - name: Get Jira Account ID from mapping
        if: steps.find_issue.outputs.issue || steps.create_issue.outputs.issue
        id: get_jira_account_id
        uses: actions/github-script@v7
        env:
          JIRA_USER_MAPPING_JSON: ${{ secrets.JIRA_USER_MAPPING_JSON }}
        with:
          script: |
            const mapping = JSON.parse(process.env.JIRA_USER_MAPPING_JSON || '{}');
            const githubUser = context.actor;
            const jiraAccountId = mapping[githubUser];
            if (!jiraAccountId) {
              core.warning(`No Jira account mapping found for GitHub user: ${githubUser}`);
              return null;
            }
            console.log(`Found Jira Account ID: ${jiraAccountId} for GitHub user: ${githubUser}`);
            return jiraAccountId;
          result-encoding: string

      - name: Assign Jira issue using REST API
        if: steps.get_jira_account_id.outputs.result
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          ISSUE_KEY=${{ steps.find_issue.outputs.issue || steps.create_issue.outputs.issue }}
          ACCOUNT_ID=${{ steps.get_jira_account_id.outputs.result }}
          
          curl --request PUT \
            --url "${JIRA_BASE_URL}/rest/api/3/issue/${ISSUE_KEY}/assignee" \
            --user "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data "{\"accountId\": \"${ACCOUNT_ID}\"}"

      - name: Get current issue status using REST API
        if: steps.find_issue.outputs.issue || steps.create_issue.outputs.issue
        id: get_status
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          ISSUE_KEY=${{ steps.find_issue.outputs.issue || steps.create_issue.outputs.issue }}
          
          STATUS=$(curl --silent --request GET \
            --url "${JIRA_BASE_URL}/rest/api/3/issue/${ISSUE_KEY}?fields=status" \
            --user "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" \
            --header "Accept: application/json" | jq -r '.fields.status.name')
            
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      # -----------------------------------------------------------------
      # 5. ステータス移行 (このアクションは安定しているので継続利用)
      # -----------------------------------------------------------------
      - name: Transition issue to 'In Review'
        if: >
          (steps.find_issue.outputs.issue || steps.create_issue.outputs.issue) &&
          (github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize') &&
          contains(steps.get_status.outputs.status, '進行中')
        uses: atlassian/gajira-transition@v3
        with:
          issue: ${{ steps.find_issue.outputs.issue || steps.create_issue.outputs.issue }}
          transition: "レビュー待ち"

      - name: Transition issue to 'Done'
        if: >
          (steps.find_issue.outputs.issue || steps.create_issue.outputs.issue) &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true &&
          (contains(steps.get_status.outputs.status, '進行中') || contains(steps.get_status.outputs.status, 'レビュー待ち'))
        uses: atlassian/gajira-transition@v3
        with:
          issue: ${{ steps.find_issue.outputs.issue || steps.create_issue.outputs.issue }}
          transition: "完了"
